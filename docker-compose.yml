version: '3.5'

volumes:
 certs:
   driver: local
 esdata01:
   driver: local

services:

  setup:
   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
   volumes:
     - certs:${ELASTIC_CERTS_PATH}
   user: "0"
   command: >
     bash -c '
       if [ x${ELASTIC_PASSWORD} == x ]; then
         echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
         exit 1;
       elif [ x${KIBANA_PASSWORD} == x ]; then
         echo "Set the KIBANA_PASSWORD environment variable in the .env file";
         exit 1;
       fi;
       if [ ! -f config/certs/ca.zip ]; then
         echo "Creating CA";
         bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
         unzip config/certs/ca.zip -d config/certs;
       fi;
       if [ ! -f config/certs/certs.zip ]; then
         echo "Creating certs";
         echo -ne \
         "instances:\n"\
         "  - name: es01\n"\
         "    dns:\n"\
         "      - es01\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         "  - name: kibana\n"\
         "    dns:\n"\
         "      - kibana\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         > config/certs/instances.yml;
         bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
         unzip config/certs/certs.zip -d config/certs;
       fi;
       echo "Setting file permissions"
       chown -R root:root config/certs;
       find . -type d -exec chmod 750 \{\} \;;
       find . -type f -exec chmod 640 \{\} \;;
       echo "Waiting for Elasticsearch availability";
       until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
       echo "Setting kibana_system password";
       until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
       echo "All done!";
     '
   healthcheck:
     test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
     interval: 1s
     timeout: 5s
     retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:${ELASTIC_CERTS_PATH}
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=${ENABLE_SECURITY}
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  elastic_client:
    image: elastic_client
    build:
      context: .
      dockerfile: ./dockerfiles/elastic_client.dockerfile
    depends_on:
      es01:
        condition: service_healthy
    environment:
      - ELASTIC_CERTS_PATH=${ELASTIC_CERTS_PATH}
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_SERVER=${ELASTIC_SERVER}
      - INDEX_PREFIX=dev
    volumes:
      - certs:${ELASTIC_CERTS_PATH}
    command: >
     bash -c '
       gunicorn --conf configs/gunicorn_conf.py --bind 0.0.0.0:80 main:app
     '
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:80/elastic/info",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - "${ELASTIC_CLIENT_PORT}:80"
  
  dummy_endpoint: 
    image: dummy_endpoint
    build:
      context: .
      dockerfile: ./dockerfiles/dummy_endpoint.dockerfile
    environment:
      - API_URL=${API_URL}
      - API_TOKEN_URL=${API_TOKEN_URL}
      - API_CLIENT_ID=${API_CLIENT_ID}
      - API_CLIENT_SECRET=${API_CLIENT_SECRET}
    command: >
     bash -c '
       gunicorn --conf configs/gunicorn_conf.py --bind 0.0.0.0:80 main:app
     '
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:80/dummy/test-api",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    ports: 
      - "${DUMMY_PORT}:80"

  preprocess_client:
    image: preprocess_client
    build:
      context: .
      dockerfile: ./dockerfiles/preprocess_client.dockerfile
    depends_on:
      es01:
        condition: service_healthy
      elastic_client:
        condition: service_healthy
      dummy_endpoint:
        condition: service_started
    environment:
      - PROCESS_LIMIT=3000
      - ELASTIC_CLIENT=http://elastic_client:80
      - DUMMY_CLIENT=http://dummy_endpoint:80
    command: >
     bash -c '
       python main.py 
       cron -f
     ' 

  demo-app:
    image: demo-app
    build: 
      context: .
      dockerfile: ./dockerfiles/demo-app.dockerfile
      args:
        - ELASTIC_CLIENT=${PUBLIC_DOMAIN}:${ELASTIC_CLIENT_PORT}/elastic
        - DUMMY_CLIENT=${PUBLIC_DOMAIN}:${DUMMY_PORT}/dummy
    ports:
      - "${DEMO_APP_PORT}:8080"